#+TITLE: FrostyX's Emacs configuration
#+AUTHOR: Jakub Kadlčík


This Emacs configuration is a mess. I am a newbie trying to hack things together
and experiment. Do not take anything from this configuration unles you know what
you are doing. Because the odds are, that I am not.


* Things to do

I would consider this configuration mature enough and not experimental anymore
once these TODO items are done. Try ~C-c C-c~ to toggle them.

- [ ] Documentation for each piece of emacs-lisp code
- [ ] Correct indentation for standard filetypes
  - [ ] When writting a checklist in org mode, newline inserts 4 spaces,
        which is wrong
  - [ ] Unify Evil's ~O~, ~RET~ for newlines plus ~TAB~ and ~>>~
  - [ ] Inteligent behavior of backspace
- [ ] Correct indentation for non-standard filetypes, such as ~.elm~
- [ ] Unified auto-completion across all programming languages
- [ ] Not messing up whitespace by either removing or showing it
- [ ] Working snippets for e.g. ~ipdb~
- [ ] Code cleanup, unified way to do things
  - [ ] All package imports using ~use-package~, even the local ones
  - [ ] Key bindings - ~:bind~ vs ~:config~ vs whatever else
  - [ ] Get rid of all ~:config nil~ lines
  - [ ] Closing brackets where they should be


These are less important, but we still want to keep track of them.

- [ ] These checklists doesn't render proprely at GitHub
- [ ] Inline code blocks containing commas doesn't render properly on GitHub
- [ ] Spell checker
- [ ] ~:set colorcolumn=120~ alternative (should be built in Emacs 27)
- [ ] Figure out how to have multiple Emacs windows/instances in order to
      utilize window manager workspaces/groups and multiple monitors
- [ ] Generate TOC list


* Defaults

#+BEGIN_SRC emacs-lisp
;; https://www.emacswiki.org/emacs/AutoPairs
;; TODO try https://github.com/Fuco1/smartparens instead
(electric-pair-mode)


;; Middle-click paste where cursor is, don't care about mouse position
;; https://superuser.com/questions/330849/can-i-tell-emacs-to-paste-middle-mouse-button-on-the-cursor-position
(setq mouse-yank-at-point t)


;; Automatically reload changed files
;; https://stackoverflow.com/q/1480572/3285282
(global-auto-revert-mode t)


;; keyboard scroll one line at a time
;; scroll when cursor is five lines from the edge
;; and don't ever recenter the cursor when scrolling
(setq scroll-step 1)
(setq scroll-margin 5)
(setq scroll-conservatively 101)


;; Don't throw "Invalid coding system" errors on me when writting a file
(define-coding-system-alias 'UTF-8 'utf-8)


;; Don't mess CWD with #foo.py# and foo.py~ files
;; https://emacs.stackexchange.com/a/34
;; (setq backup-directory-alist '(("." . "~/MyEmacsBackups")))
;; (setq backup-directory-alist '("~/MyEmacsBackups"))
;; (setq backup-directory-alist `(("." . "~/MyEmacsBackups")))


;; https://stackoverflow.com/a/18330742/3285282
(defvar --backup-directory (concat user-emacs-directory "MyEmacsBackups"))
(if (not (file-exists-p --backup-directory))
        (make-directory --backup-directory t))
(setq backup-directory-alist `(("." . ,--backup-directory)))
(setq backup-directory-alist `((,--backup-directory)))
(setq make-backup-files t               ; backup of a file the first time it is saved.
      backup-by-copying t               ; don't clobber symlinks
      version-control t                 ; version numbers for backup files
      delete-old-versions t             ; delete excess backup files silently
      delete-by-moving-to-trash t
      kept-old-versions 6               ; oldest versions to keep when a new numbered backup is made (default: 2)
      kept-new-versions 9               ; newest versions to keep when a new numbered backup is made (default: 2)
      auto-save-default t               ; auto-save every buffer that visits a file
      auto-save-timeout 20              ; number of seconds idle time before auto-save (default: 30)
      auto-save-interval 200            ; number of keystrokes between auto-saves (default: 300)
      )
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; Always open help buffers in the current window
;; e.g. opening a package info from `M-x list packages' uses a help mode
;; https://emacs.stackexchange.com/a/22502
(add-to-list 'display-buffer-alist
             '("*Help*" display-buffer-same-window)
             ;; '("*Playlists: *" display-buffer-same-window))
)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook #'display-line-numbers-mode)
(save-place-mode 1)
#+END_SRC


* Package management

We want to automatically update Emacs packages in order to avoid annoying warnings
during startup, that some package is recommended to be updated.

Update automatically every night, don't ask for confirmation and don't bother us
with update at Emacs startup.

See https://emacs.stackexchange.com/a/31904

#+BEGIN_SRC emacs-lisp
(use-package auto-package-update
   :ensure t
   :config
   (setq auto-package-update-delete-old-versions t
         auto-package-update-interval 1
         auto-package-update-prompt-before-update nil
         auto-package-update-hide-results t)
   (auto-package-update-at-time "04:00"))
#+END_SRC


* Secrets

Please do not hardcode your passwords or secret information into source code.
Store them into some keyring application (e.g. ~pass~) and query them instead.
This solution provides many advantages:

1. You can safely share your configs publicly without exposing sensitive data,
   /*duh*/
2. No messing with partially commiting files just to leave the sensitive parts
3. In comparison to including a git ignored file with password definitions,
   keyrings have strong encryption

See:
- https://www.passwordstore.org/
- https://medium.com/@chasinglogic/the-definitive-guide-to-password-store-c337a8f023a1

#+BEGIN_SRC emacs-lisp
(use-package password-store
  :ensure t)
#+END_SRC

* Evil

#+BEGIN_SRC emacs-lisp
;; load evil
(use-package evil
  :ensure t ;; install the evil package if not installed
  :init ;; tweak evil's configuration before loading it
  (setq evil-search-module 'evil-search)
  (setq evil-ex-complete-emacs-commands nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (setq evil-shift-round nil)
  (setq evil-want-C-u-scroll t)


  ;; https://github.com/emacs-evil/evil-collection
  (setq evil-want-keybinding nil)

  (setq evil-ex-set-initial-state 'normal)

  :config ;; tweak evil after loading it
  (evil-mode)


  ;; https://www.reddit.com/r/emacs/comments/7dsm0j/how_to_get_evilmode_hjkl_to_work_inside_mx/
  (evil-define-key 'normal package-menu-mode-map (kbd "m") #'package-menu-mark-install)
  (evil-define-key 'normal package-menu-mode-map (kbd "u") #'package-menu-mark-unmark)
  (evil-define-key 'normal package-menu-mode-map (kbd "x") #'package-menu-execute)

  (define-key evil-normal-state-map (kbd ";") 'helm-projectile-switch-to-buffer)
  (define-key evil-normal-state-map (kbd ",;") 'helm-buffers-list)

  ;; ctrl+w hjkl is too slow
  (define-key evil-normal-state-map (kbd "C-h") 'evil-window-left)
  (define-key evil-normal-state-map (kbd "C-j") 'evil-window-down)
  (define-key evil-normal-state-map (kbd "C-k") 'evil-window-up)
  (define-key evil-normal-state-map (kbd "C-l") 'evil-window-right)




  (defun toggle-fullscreen ()
    ;; https://www.reddit.com/r/emacs/comments/86iq3w/evil_cw_o_toggle_windows/
    (interactive)
    (if (window-parent)
        (delete-other-windows)
      (winner-undo)))

  (define-key evil-normal-state-map (kbd "C-w o") 'toggle-fullscreen)

  ;; (define-key global-map (kbd "C-w o") 'toggle-fullscreen)
  ;; (evil-define-key 'normal evil-normal-state-map (kbd "C-w o") 'toggle-fullscreen)


  ; (evil-define-key* 'motion elfeed-show-mode-map
        ;                               "gb" #'elfeed-show-visit
        ;                               "gj" #'elfeed-show-next
        ;                               "gk" #'elfeed-show-prev)



  (define-key evil-normal-state-map (kbd "C-n") 'neotree-find)
  (evil-define-key 'normal neotree-mode-map (kbd "C-n") 'neotree-hide)
  (evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
  (evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-quick-look)
  (evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
  (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
  (evil-define-key 'normal neotree-mode-map (kbd "g") 'neotree-refresh)
  (evil-define-key 'normal neotree-mode-map (kbd "n") 'neotree-next-line)
  (evil-define-key 'normal neotree-mode-map (kbd "p") 'neotree-previous-line)
  (evil-define-key 'normal neotree-mode-map (kbd "A") 'neotree-stretch-toggle)
  (evil-define-key 'normal neotree-mode-map (kbd "H") 'neotree-hidden-file-toggle)


  ; (use-package evil-surround
  ;   :ensure t
  ;   :config
  ;   (global-evil-surround-mode))

  ;; ;; @FIXME missing config
  ;; (use-package evil-indent-textobject
  ;;   :ensure t)

  (use-package evil-commentary
    :ensure t
    :config
    (evil-commentary-mode)
    ;; (evil-define-key 'normal evil-commentary-mode-map ", c" 'evil-commentary-line)

    ;; This bind doesn't work for some reason, use `gc` instead
    ;(evil-define-key 'visual evil-commentary-mode-map ", c" 'evil-commentary-line)

    ))
#+END_SRC


** Evil leader

See https://github.com/cofi/evil-leader

#+BEGIN_SRC emacs-lisp
(use-package evil-leader
  :ensure t
  :config
  (evil-leader/set-leader ",")
  (global-evil-leader-mode))
#+END_SRC

TODO projectile

#+BEGIN_SRC emacs-lisp
(evil-leader/set-key
  "f" 'helm-projectile
  "p" 'helm-projectile-switch-project)
#+END_SRC

TODO magit

#+BEGIN_SRC emacs-lisp
(evil-leader/set-key
  "ga" 'magit-stage-file
  "gc" 'magit-commit  ;; Maybe magit-commit-create
  "gp" 'magit-push-current) ;; @TODO still asks for something, use more specific function
#+END_SRC

Random garbage

#+BEGIN_SRC emacs-lisp
(evil-leader/set-key
  "w" 'evil-window-vsplit
  "def" 'evil-jump-to-tag)
#+END_SRC


** Vim keybindings everywhere

#+BEGIN_SRC emacs-lisp
;; ;; https://emacs.stackexchange.com/questions/10350/how-can-i-add-a-new-colon-command-to-evil
(eval-after-load 'evil-ex
  '(evil-ex-define-cmd "Gbrowse" 'browse-at-remote))


(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))

;; use evil mode in the buffer created from calling `M-x list-packages'.
;; https://blog.aaronbieber.com/2016/01/23/living-in-evil.html#adding-hjkl-bindings-
(evil-add-hjkl-bindings occur-mode-map 'emacs
  (kbd "/")       'evil-search-forward
  (kbd "n")       'evil-search-next
  (kbd "N")       'evil-search-previous
  (kbd "C-d")     'evil-scroll-down
  (kbd "C-u")     'evil-scroll-up
  (kbd "C-w C-w") 'other-window)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq evil-default-state 'normal) ;; changes default state to emacs
#+END_SRC


** More Vim compatibility

#+BEGIN_SRC emacs-lisp
;; https://emacsredux.com/blog/2014/08/27/a-peek-at-emacs-24-dot-4-superword-mode/
;; #@FIXME using this manually in a python file works, but this config setting not
;; Probably `global-*' mode settings will be required here. Wihout global, the setting
;; is only for the current buffer
;; (superword-mode)
(global-superword-mode)


;; https://emacs.stackexchange.com/a/9584
;; Superword mode seems to apply only on searching, adding also this,
;; to get w, yiw, dw, etc working as expected
(modify-syntax-entry ?_ "w")

;; https://github.com/syl20bnr/spacemacs/blob/develop/doc/FAQ.org#include-underscores-in-word-motions
;; (add-hook 'prog-mode-hook #'(lambda () (modify-syntax-entry ?_ "w")))
;; (add-hook 'mhtml-mode-hook #'(lambda () (modify-syntax-entry ?_ "w")))

;; https://emacs.stackexchange.com/questions/9583/how-to-treat-underscore-as-part-of-the-word/20717#20717
;; (with-eval-after-load 'evil
;;     (defalias #'forward-evil-word #'forward-evil-symbol)
;;     ;; make evil-search-word look for symbol rather than word boundaries
;;     (setq-default evil-symbol-word-search t))
#+END_SRC

* Interface

** GUI

Disable all the GUI nonsense. Even though we are running graphical version of Emacs,
we want to be #mouseless and have the UI to look as close to terminal as possible.

Get rid of menu, scrollbars, toolbars and everything that can be clicked on.

#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)
#+END_SRC

** Themes

At this point, my whole desktop environment uses ~base16-chalk~

See http://chriskempson.com/projects/base16/

#+BEGIN_SRC emacs-lisp
(use-package base16-theme
  :ensure t
  :config
  (load-theme 'base16-chalk t))
#+END_SRC


** Fonts

#+BEGIN_SRC emacs-lisp
(set-face-attribute
  'default nil
  :family "vera sans"
  :height 90
  :weight 'normal
  :width 'normal)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; http://chriskempson.com/projects/base16/
(set-face-attribute 'lazy-highlight nil :background (plist-get base16-chalk-colors :base09)
                                        :foreground (plist-get base16-chalk-colors :base01))
#+END_SRC

** UX

#+BEGIN_SRC emacs-lisp
(use-package neotree
  :ensure t
  :config
  (setq-default neo-show-hidden-files t)
  nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package spaceline
  :ensure t
  :config

  ;; http://chriskempson.com/projects/base16/
  (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
  (set-face-attribute 'spaceline-evil-normal nil :background (plist-get base16-chalk-colors :base01) :foreground (plist-get base16-chalk-colors :base09))
  (set-face-attribute 'spaceline-evil-emacs nil :background (plist-get base16-chalk-colors :base01) :foreground (plist-get base16-chalk-colors :base0D))
  (set-face-attribute 'spaceline-evil-insert nil :background (plist-get base16-chalk-colors :base01) :foreground (plist-get base16-chalk-colors :base0B))
  (set-face-attribute 'spaceline-evil-replace nil :background (plist-get base16-chalk-colors :base01) :foreground (plist-get base16-chalk-colors :base0D))
  (set-face-attribute 'spaceline-evil-motion nil :background (plist-get base16-chalk-colors :base01) :foreground (plist-get base16-chalk-colors :base0D))
  (set-face-attribute 'spaceline-evil-visual nil :background (plist-get base16-chalk-colors :base01) :foreground (plist-get base16-chalk-colors :base0E))

  (spaceline-spacemacs-theme))
#+END_SRC

*** Helm

#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :config
  (helm-mode 1)
  (setq helm-autoresize-mode t)
  (setq helm-buffer-max-length 40)
  (setq helm-locate-fuzzy-match t)


  (global-set-key (kbd "M-x") #'helm-M-x)
  ; (define-key helm-map (kbd "S-SPC") 'helm-toggle-visible-mark)
  ; (define-key helm-find-files-map (kbd "C-k") 'helm-find-files-up-one-level)

  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to do persistent action
  (define-key helm-map (kbd "TAB") #'helm-execute-persistent-action)
  (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

  ; http://cachestocaches.com/2016/12/vim-within-emacs-anecdotal-guide/
  (define-key helm-map (kbd "C-j") 'helm-next-line)
  (define-key helm-map (kbd "C-k") 'helm-previous-line)
  (define-key helm-map (kbd "C-h") 'helm-next-source)

  (define-key helm-map [escape] 'helm-keyboard-quit)

  ; (define-key helm-map (kbd "C-S-h") 'describe-key)
  ; (define-key helm-map (kbd "C-l") (kbd "RET"))
  ; (dolist (keymap (list helm-find-files-map helm-read-file-map))
        ; (define-key keymap (kbd "C-l") 'helm-execute-persistent-action)
        ; (define-key keymap (kbd "C-h") 'helm-find-files-up-one-level)
        ; (define-key keymap (kbd "C-S-h") 'describe-key))


  (use-package helm-posframe
    :ensure t
    :config
    (helm-posframe-enable)
    (setq helm-posframe-poshandler
          ;; #'posframe-poshandler-frame-top-center)
          #'posframe-poshandler-frame-center)
    (setq helm-posframe-width 200)
    (setq helm-posframe-height 600)
    (setq helm-posframe-parameters
          '((left-fringe . 10)
            (right-fringe . 10))))
)
#+END_SRC

*** Hydra

#+BEGIN_SRC emacs-lisp
;; (use-package hydra-posframe
;;   :load-path "/home/jkadlcik/git/hydra-posframe"
;;   :hook (after-init . hydra-posframe-enable)
;;   :config
;;   (setq hydra-posframe-border-width 1)
;;   (setq hydra-posframe-parameters
;;         '((left-fringe . 10)
;;           (right-fringe . 10))))



;; Create my own spacemacs-like menu
(use-package hydra
  :ensure t
  :bind
  ("C-SPC" . hydra-main/body)
  :config
  (define-key evil-normal-state-map (kbd "SPC") 'hydra-main/body)
  :custom
  (hydra-default-hint nil))


(use-package pretty-hydra
  :ensure t)


;; (pretty-hydra-define hydra-main
;;   (:color amaranth :title "FOO")
;;   ("Bar"
;;     (("SPC" nil "quit")
;;      ("q" nil "quit"))

;;    "Misc"
;;     (("a" hydra-applications/body "applications")
;;      ("z" hydra-zoom/body "zoom"))))


(defhydra hydra-main (:color blue)
  "
    ^
    ^Hydra^              ^Misc^                      ^Workspaces^                    ^Projects^                       ^Emacs^
    ^^^^^^─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
    _q_ quit            _m_ major mode               _e_  switch workspace           _p_ switch project               _r_ reload configuration
    ^^                  _a_ applications             _E_  eyebrowse                  _P_ projectile
    ^^                  _o_ open
    ^^                  _z_ zoom
  "
  ("SPC" nil)
  ("q" nil)
  ("m" hydra-major/body)
  ("a" hydra-applications/body)
  ("o" browse-url)
  ("z" hydra-zoom/body)
  ("e" eyebrowse-switch-to-window-config)
  ("E" nil)  ;; @TODO
  ("p" helm-projectile-switch-project)
  ("P" hydra-project/body)
  ("r" (load-file user-init-file)))


(defhydra hydra-zoom (:color blue)
  "
    ^
    ^Zoom^              ^Actions^
    ^^^^───────────────────────────
    _q_ quit            _l_ lesser
    ^^                  _g_ greater
  "
  ("SPC" nil)
  ("q" nil)
  ("l" text-scale-decrease)
  ("g" text-scale-increase))


(defhydra hydra-project (:color blue)
  "
    ^
    ^Project^            ^Actions^
    ^^^^───────────────────────────
    _q_ quit            _d_ discover
  "
  ("SPC" nil)
  ("q" nil)
  ("d" projectile-discover-projects-in-search-path))


(defhydra hydra-applications (:color blue)
  "
    ^
    ^Applications^              ^Launch^
    ^^^^─────────────────────────────────────────────
    _q_ quit            _r_ RSS (elfeed)
    ^^                  _w_ web (eww)
    ^^                  _e_ email (mu4e)
    ^^                  _p_ spotify - my playlists
    ^^                  _s_ spotify - recently played
  "
  ("SPC" nil)
  ("q" nil)
  ("r" elfeed)
  ("w" eww)
  ("e" mu4e)
  ("p" spotify-my-playlists)
  ("s" spotify-recently-played))


;; We should actually call a different hydra based on the current major mode
(defhydra hydra-major (:color blue)
  "
    ^
    ^Python^              ^Actions^
    ^^^^───────────────────────────
    _q_ quit            _d_ doc
    ^^                  _e_ edit special
    ^^                  _s_ save special edit
  "
  ("SPC" nil)
  ("q" nil)
  ("d" elpy-doc)
  ("e" org-edit-special)
  ("s" org-edit-src-exit))
#+END_SRC


* Project management

When working on multiple projects at the same time, it is useful keep some level
of separation between them. This is where ~projectile~ comes handy. It allows you
to easily filter buffers, search files, work with tags and do many more action
within a current project.

As a project is considered every git (or other SCM) repository, or a directory
containing a ~.projectile~ file in it.

See https://github.com/bbatsov/projectile

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :config
  (setq projectile-project-search-path '("~/git/")))
#+END_SRC

The only thing that ~projectile~ doesn't allow you to do (at least by default) is
having multiple workspaces/tabs/perspectives or whatever you want to call it and
switching between them. The purpose of such hypothetical workspaces would be to
have one project per workspace that would allow to preserve splits layout when
switching projects. This is essential for me since I work on 5-10 projects
simultaneously.

Such behavior can be achieved using ~eyebrowse~ even though it feels a little
like a workaround. Eyebrowse is not project-oriented by design, it gives you
free hand on what to use workspaces for. For this reason, it lacks certain
project management shortcuts, that I would appreciate.

See https://github.com/wasamasa/eyebrowse

#+BEGIN_SRC emacs-lisp
(use-package eyebrowse
  :ensure t
  :config
  (eyebrowse-mode t)
  (eyebrowse-setup-opinionated-keys)

  (evil-leader/set-key
    "e" 'eyebrowse-switch-to-window-config
    "c" 'eyebrowse-create-window-config
    "$" 'eyebrowse-rename-window-config)

  ;; unmap `gc' because it conflicts with `evil-commentary'
  :bind
  (:map evil-normal-state-map
     ("g c" . nil)

   :map evil-motion-state-map
     ("g c" . nil)))
#+END_SRC

My workflow for opening a new project is.

1. Create a new workspace ~<leader>c~
2. This preserves splits from previous workspace, which is a little bit
   inconvenient. Leave just one with ~C-w O~
3. Switch to the desired project ~<leader>p~
4. Rename the workspace ~<leader>$~


* Sessions

With Emacs, the idea is to launch it, use it and then never ever close it. Basically
just become one with it and let it consume you. The problem is that sometimes we
just don't have another option than to close it (laptop battery can run out, power
outages, system reboots). All of these sucks by themselves but they can be particularly
painful when hundreds days long Emacs session gets killed and you are forced to start
from scratch.

For this reason, we want to save a current session when closing Emacs and restore it
when launching it. Additionally we want to periodically save the current session to
prevent its lose in more violent situations than ~SIGTERM~.

See https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Emacs-Sessions.html

#+BEGIN_SRC emacs-lisp
(desktop-save-mode 1)
#+END_SRC

The periodical save is achieved by ~auto-save-*~ settings as a "side effect".

To preserve even splits layout when restoring Emacs from a previous session,
we need to explicitly load saved frameset from ~desktop-saved-frameset~

See https://emacs.stackexchange.com/a/45829

#+BEGIN_SRC emacs-lisp
(setq desktop-restore-forces-onscreen nil)
(add-hook 'desktop-after-read-hook
 (lambda ()
   (frameset-restore
    desktop-saved-frameset
    :reuse-frames (eq desktop-restore-reuses-frames t)
    :cleanup-frames (not (eq desktop-restore-reuses-frames 'keep))
    :force-display desktop-restore-in-current-display
    :force-onscreen desktop-restore-forces-onscreen)))
#+END_SRC

This approach is able to correctly save and restore even ~eyebrowse~ workspaces.


* Development

#+BEGIN_SRC emacs-lisp
(use-package dtrt-indent
  :ensure t
  :config
  (dtrt-indent-global-mode)
  (dtrt-indent-adapt))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package fic-mode
  :ensure t
  :config
  (add-hook 'prog-mode-hook 'fic-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  ;; There is a bug visualizing even #def in .Xdefaults
  :ensure t
  :config
  nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; (use-package browse-at-remote
;;   ;; https://github.com/rmuslimov/browse-at-remote
;;   :ensure t
;;   :config
;;   nil)

(add-to-list 'load-path "/home/jkadlcik/git/browse-at-remote")
(require 'browse-at-remote)
(setq browse-at-remote-add-line-number-if-no-region-selected nil)
#+END_SRC

** Completion

#+BEGIN_SRC emacs-lisp
  ;; (define-key company-active-map (kbd "C-n") 'company-select-next)
  ;; (define-key company-active-map (kbd "C-p") 'company-select-previous)
  ;; (define-key company-search-map (kbd "C-n") 'company-select-next)
  ;; (define-key company-search-map (kbd "C-p") 'company-select-previous)
#+END_SRC

** Whitespace

#+BEGIN_SRC emacs-lisp
;; @TODO try this after restarting emacs
;; https://stackoverflow.com/questions/15946178/change-the-color-of-the-characters-in-whitespace-mode
;; (setq whitespace-display-mappings
;;   ;; all numbers are Unicode codepoint in decimal. ⁖ (insert-char 182 1)
;;   '(
;;     (space-mark 32 [183] [46]) ; 32 SPACE 「 」, 183 MIDDLE DOT 「·」, 46 FULL STOP 「.」
;;     (newline-mark 10 [182 10]) ; 10 LINE FEED
;;     (tab-mark 9 [9655 9] [92 9]) ; 9 TAB, 9655 WHITE RIGHT-POINTING TRIANGLE 「▷」
;;     ))
#+END_SRC

** Languages
*** Python

#+BEGIN_SRC emacs-lisp
(use-package elpy
  ;; sudo dnf install python3-virtualenv
  :ensure t
  :init
  ;; @TODO have some module for snippets
  (setq elpy-modules
        '(elpy-module-sane-defaults
          elpy-module-company
          elpy-module-eldoc
          elpy-module-django))
  (elpy-enable))
#+END_SRC

*** Lisp

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :config
  (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

*** Elm

Elm command line tools (such as ~elm-format~) are not properly packaged in Fedora,
so we need to install them using ~npm~.

#+BEGIN_SRC bash
npm install elm
npm install elm-format
npm install elm-test
#+END_SRC

Extend ~$PATH~ so Emacs can use them.

#+BEGIN_SRC emacs-lisp
(add-to-list 'exec-path (expand-file-name "~/node_modules/.bin"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package elm-mode
  :ensure t
  :config
  (add-hook 'elm-mode-hook 'elm-format-on-save-mode))
#+END_SRC

*** Jinja2

#+BEGIN_SRC emacs-lisp
;; @TODO use jinja2-mode package
#+END_SRC

*** Org

#+BEGIN_SRC emacs-lisp
(use-package toc-org
  :ensure t
  :after org)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-src-window-setup 'current-window)
(setq org-src-preserve-indentation nil)
(setq org-edit-src-content-indentation 0)
#+END_SRC

See https://stackoverflow.com/a/24173780/3285282

#+BEGIN_SRC emacs-lisp
;; @FIXME doesn't seem to work for GitHub
(setcar (nthcdr 2 org-emphasis-regexp-components) " \t\r\n\"'")
(org-set-emph-re 'org-emphasis-regexp-components org-emphasis-regexp-components)
#+END_SRC

** LSP

#+BEGIN_SRC emacs-lisp
;; When messing with the configuration and going back to elpy, delete
;; these packages with `M-x package-delete'
;;
;; (use-package company
;;   :ensure t
;;   :config
;;   (global-company-mode))

;; (use-package flycheck
;;   :ensure t)

;; (use-package lsp-mode
;;   :ensure t
;;   ;; Support for specific languages:
;;   ;; Python: pip-3 install --user python-language-server[all]

;;   :init
;;   (setq lsp-keymap-prefix "s-l")

;;   ;;@FIXME autocompletion inserts function arguments and it sux
;;   ;;       using elpy until that
;;   ;; :hook
;;   ;; ((python-mode . lsp))

;;   :config
;;   (setq lsp-enable-symbol-highlighting nil)
;;   (setq lsp-signature-auto-activate nil)
;;   (setq lsp-enable-snippet nil)
;;   (setq lsp-enable-completion-at-point nil)

;;   :commands lsp)

;; (use-package lsp-ui
;;   :disabled
;;   :ensure t
;;   :commands lsp-ui-mode)

;; (use-package company-lsp
;;   :ensure t
;;   :config
;;   (setq company-lsp-enable-snippet nil)
;;   :commands company-lsp)

;; (use-package helm-lsp
;;   :ensure t
;;   :commands helm-lsp-workspace-symbol)

;; (setq company-minimum-prefix-length 1
;;       company-idle-delay 0) ;; default is 0.2

;; (add-hook 'prog-mode-hook (lambda () (highlight-indentation-mode -1)))
#+END_SRC

* Writing

#+BEGIN_SRC emacs-lisp
;; @TODO don't modify modeline
(setq writeroom-fullscreen-effect (quote maximized))
(add-hook 'writeroom-mode-hook
        (lambda ()
          (if writeroom-mode
              (progn
                (blink-cursor-mode 0)  ; turn off blinky cursor
                (fringe-mode 0)  ; hide fringes
                (setq-local inhibit-message t))  ; don't distract
            (progn
              (blink-cursor-mode t)
              (fringe-mode nil)
              (setq-local inhibit-message t)))))


(set-face-attribute 'line-number-current-line nil
  :inverse-video nil
  ;https://github.com/belak/base16-emacs/commit/f701a8e191ae9c0bd6ab93926ce993bb18a9e98c
  ; :foreground "base03"
  ; :background "base01")
)
#+END_SRC

* Applications

** Web

*** EWW
EWW notes here
Key bindings
https://github.com/emacs-evil/evil-collection/blob/master/modes/eww/evil-collection-eww.el
o - open
go - open in external browser

*** w3m

#+BEGIN_SRC emacs-lisp
(use-package w3m
  :ensure t
  :config
  nil)
#+END_SRC

** Email

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
;; (add-to-list 'load-path "/home/jkadlcik/git/spotify.el")
(require 'mu4e)


;; sudo dnf install maildir-utils

(use-package mu4e
  :ensure nil
  :config
  (setq mu4e-maildir (expand-file-name "~/Mail/seznam"))

  ;; https://etienne.depar.is/emacs.d/mu4e.html
  (setq mu4e-split-view 'vertical)
  (setq mu4e-headers-visible-columns 67)
  (setq mu4e-html2text-command "w3m -dump -T text/html -cols 72 -o display_link_number=true -o auto_image=false -o display_image=false -o ignore_null_img_alt=true")
  (setq mu4e-headers-date-format "%d. %m. %Y")
  (setq mu4e-headers-time-format "%H:%M")
  (setq mu4e-view-show-addresses t)
  (setq message-kill-buffer-on-exit t)
  (setq mu4e-get-mail-command "mbsync -V seznam")

  ;; (setq )
  ;; (setq )

  (setq mu4e-headers-show-threads t)  ;; does this work?

  (setq mu4e-update-interval 120) ;; two minutes
  (setq mu4e-use-fancy-chars t)

  (setq user-full-name "Jakub Kadlčík")
  (setq user-mail-adress "frostyx@email.cz")
  (setq mail-user-agent 'message-user-agent)
  (setq mail-specify-envelope-from t)


  ;; (setq mu4e-headers-unread-mark  '("u" . "🖂"))
  ;; (setq mu4e-headers-attach-mark '("a" . "📎"))

  (setq mu4e-headers-unread-mark '("u" . "u")
        mu4e-headers-draft-mark '("D" . "D") ; draft
        mu4e-headers-seen-mark '("S" . "S") ; seen
        mu4e-headers-unseen-mark '("u" . "u") ; unseen
        mu4e-headers-flagged-mark '("F" . "F") ; flagged
        mu4e-headers-new-mark '("N" . "N") ; new
        mu4e-headers-replied-mark '("R" . "R") ; replied
        mu4e-headers-passed-mark '("P" . "P") ; passed
        mu4e-headers-encrypted-mark '("x" . "x") ; encrypted
        mu4e-headers-signed-mark '("s" . "s")) ; signed

  ;; the headers to show in the headers list -- a pair of a field
  ;; and its width, with `nil' meaning 'unlimited'
  ;; (better only use that for the last field.
  ;; These are the defaults:
  (setq mu4e-headers-fields
      '((:human-date . 20)    ;; alternatively, use :date
        (:flags . 10)
        (:from . 30)
        (:subject . nil))) ;; alternatively, use :thread-subject


  ;; @TODO notifications
  ;; https://github.com/iqbalansari/mu4e-alert

  nil)
#+END_SRC

** RSS

#+BEGIN_SRC emacs-lisp
(use-package elfeed
  :ensure t
  :commands (elfeed)


  :commands elfeed
        ; :bind (:map elfeed-search-mode-map
        ;          ("<SPC>" . next-line)
        ;          ("U" . elfeed-unjam)
        ;          :map elfeed-show-mode-map
        ;          ("S-<SPC>" . scroll-down-command))

  :config
  (setq-default elfeed-search-filter "")
  (setq elfeed-feeds
  '("http://nullprogram.com/feed/"
    "http://planet.emacsen.org/atom.xml")))



(with-eval-after-load "elfeed-search"
  (evil-define-key* 'motion elfeed-search-mode-map
                                        "RET" #'elfeed-search-show-entry
                                        "go" #'elfeed-search-show-entry
                                        "gb" #'elfeed-search-browse-url
                                        "gr" #'elfeed-search-update--force
                                        "gR" #'elfeed-search-fetch))

(with-eval-after-load "elfeed-show"
(evil-define-key* 'motion elfeed-show-mode-map
                  "gb" #'elfeed-show-visit
                  "gj" #'elfeed-show-next
                  "gk" #'elfeed-show-prev)
)
#+END_SRC

** Spotify


#+BEGIN_SRC emacs-lisp
;; This spotify library is not in MELPA yet,
;; see https://github.com/danielfm/spotify.el/issues/44
;;
;; Also, for playing, web player (or other device) must be opened
;; See https://github.com/danielfm/spotify.el/#selecting-a-device-for-playback
(add-to-list 'load-path "/home/jkadlcik/git/spotify.el")
(require 'spotify)
(setq spotify-oauth2-client-id (password-store-get "spotify/client-id"))
(setq spotify-oauth2-client-secret (password-store-get "spotify/client-secret"))
(setq spotify-transport 'connect)
(define-key spotify-mode-map (kbd "C-c .") 'spotify-command-map)

;; https://github.com/danielfm/spotify.el#remote-minor-mode
(evil-define-key 'normal spotify-mode-map (kbd "q") 'spotify-quit)  ;; @FIXME doesn't work, probably create an issue
(evil-define-key 'normal spotify-mode-map (kbd "go") 'spotify-track-select)
(evil-define-key 'normal spotify-mode-map (kbd "gp") 'spotify-toggle-play)
(evil-define-key 'normal spotify-mode-map (kbd "g<") 'spotify-previous-track)
(evil-define-key 'normal spotify-mode-map (kbd "g>") 'spotify-next-track)
(evil-define-key 'normal spotify-mode-map (kbd "gd") 'spotify-select-device)
#+END_SRC

** NetworkManager

#+BEGIN_SRC emacs-lisp
(use-package enwc
  :ensure t
  :config
  (setq enwc-default-backend 'nm)
  (setq enwc-wireless-device 'wlp2s0)
  ;; (define-key enwc-mode-map (kbd "C") 'enwc-connect-to-network-essid)
  nil)

;; (evil-add-hjkl-bindings enwc-mode-map 'emacs
;;   (kbd "/")       'evil-search-forward
;;   (kbd "n")       'evil-search-next
;;   (kbd "N")       'evil-search-previous
;;   (kbd "C-d")     'evil-scroll-down
;;   (kbd "C-u")     'evil-scroll-up
;;   (kbd "C-w C-w") 'other-window)

;; (use-package powerline
;;   :ensure t
;;   :config
;;   (powerline-default-theme))
#+END_SRC

* Resources

** Other people configs

- https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org
- https://jamiecollinson.com/blog/my-emacs-config/
- https://emacs.nasy.moe/
